configuration: {}
triggers:
  - id: "1"
    configuration:
      cronExpression: 57 * * * * ? *
    type: timer.GenericCronTrigger
conditions: []
actions:
  - inputs: {}
    id: "2"
    configuration:
      type: application/javascript;version=ECMAScript-2021
      script: >-
        var ZonedDateTime = Java.type("java.time.ZonedDateTime");


        var out = "";


        var now = ZonedDateTime.now()


        //var date = now.format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        var date = now.format(java.time.format.DateTimeFormatter.ofPattern("E d.MMM yyyy"));

        // set time 2 minutes ahead, case rule runs on sec 57

        var time = (now.plusMinutes(2)).format(java.time.format.DateTimeFormatter.ofPattern("HH:mm"));

        //console.info(timestamp);


        out = date + "#" + time + "#";


        // PV Power 

        // averageSince returns null when PVPower is 0 ..???!! 

        var PersistenceExtensions = Java.type("org.openhab.core.persistence.extensions.PersistenceExtensions");



        var lastValue = parseInt(items.getItem("HikingDDS2382Power").state);

        //console.info("esp32rules", "PVPower lastValue value: " + lastValue);


        //var pvPower = items.getItem("HikingDDS2382Power").history.averageSince(now.minusHours(12));

        var pvPower = items.getItem("HikingDDS2382Power").history.averageSince(now.minusMinutes(1));


        //console.info("esp32rules", "PVPower average value: " + pvPower);


        if ((pvPower != null) && (lastValue != 0.0)) {
          //console.info("esp32rules if", parseInt(pvPower));
          out += parseInt(pvPower);
        }

        else {
            //console.info("esp32ruless else", parseInt(items.getItem("HikingDDS2382Power").state));
        	out += parseInt(items.getItem("HikingDDS2382Power").state);
        }



        // total power

        //console.info("esp32rules total power: " , parseInt(items.getItem("emonAccumulatedWatts").history.averageSince(now.minusMinutes(1))));

        out += "#" + parseInt(items.getItem("emonAccumulatedWatts").history.averageSince(now.minusMinutes(1)));


        // Aussen Temperatur

        out += "#" + parseFloat(items.getItem("AussenTemperatur").state).toFixed(1);


        // Aussen Temperatur Min

        out += "#" + parseFloat(items.getItem("AussenTemperaturTodayMin").state).toFixed(1);


        // Aussen Temperatur Max

        out += "#" + parseFloat(items.getItem("AussenTemperaturTodayMax").state).toFixed(1);


        // Aussen Luftfeuchte

        out += "#" + parseInt(items.getItem("AussenLuftfeuchte").state).toFixed(0);


        // wohnzimmer temperatur

        out += "#" + parseFloat(items.getItem("Aqara1Temperatur").state).toFixed(1);


        // wohnzimmer Luftfeuchte

        out += "#" + parseInt(items.getItem("Aqara1Luftfeuchte").state);


        // bad temperatur

        out += "#" + parseFloat(items.getItem("Aqara2Temperatur").state).toFixed(1);

        // bad Luftfeuchte

        out += "#" + parseInt(items.getItem("Aqara2Luftfeuchte").state);


        // schlafzimmer temperatur

        out += "#" + parseFloat(items.getItem("SchlafzimmerTemperatur").state).toFixed(1);

        // schlafzimmer Luftfeuchte

        out += "#" + parseInt(items.getItem("SchlafzimmerLuftfeuchte").state);


        // S.Zimmer

        out += "#" + parseFloat(items.getItem("Aqara3Temperatur").state).toFixed(1);

        // S.Zimmer Luftfeuchte

        out += "#" + parseInt(items.getItem("Aqara3Luftfeuchte").state);


        // L.Zimmer

        out += "#" + parseFloat(items.getItem("ArbeitszimmerTemperatur").state).toFixed(1);

        // L.Zimmer Luftfeuchte

        out += "#" + parseInt(items.getItem("ArbeitszimmerLuftfeuchte").state);


        // CO2 Vorraum

        out += "#" + parseInt(items.getItem("Vorraum1StkCO2").state);


        // Wind

        out += "#" + parseInt(items.getItem("BalkonWindgeschwindigkeit").history.averageSince(now.minusMinutes(30)));


        // moon
            
        //   "ó°½¢", # NEW                     NEW=ğŸŒ‘ Neumond

        //   "ó°½¦", # WAXING_CRESCENT          WAXING_CRESCENT=ğŸŒ‘â†’ğŸŒ“ zunehmender Halbmond

        //   "ó°½£", # FIRST_QUARTER           FIRST_QUARTER=ğŸŒ“ erstes Viertel

        //   "ó°½¥", # WAXING_GIBBOUS          WAXING_GIBBOUS=ğŸŒ“â†’ğŸŒ• zunehmender Mond

        //   "ó°½¤", # FULL                     FULL=ğŸŒ• Vollmond

        //   "ó°½§", # WANING_GIBBOUS          WANING_GIBBOUS=ğŸŒ•â†’ğŸŒ— abnehmender Mond

        //   "ó°½¡", # THIRD_QUARTER            THIRD_QUARTER=ğŸŒ— letztes Viertel

        //   "ó°½¨", # WANING_CRESCENT         WANING_CRESCENT=ğŸŒ—â†’ğŸŒ‘ abnehmender Halbmond


        //console.log("Moon phase: ", items.getItem("MoonPhase").state)


        switch (items.getItem("MoonPhase").state) {
            case "NEW": 
              out += "#" +  "ó°½¢";
              break;
            case "ğŸŒ‘ Neumond":
              out += "#" +  "ó°½¢";
              break;
            case "WAXING_CRESCENT": 
              out += "#" +  "ó°½¦";
              break;
            case "ğŸŒ‘â†’ğŸŒ“ zunehmender Halbmond":
              out += "#" +  "ó°½¦";
              break;
            case "FIRST_QUARTER":
              out += "#" +  "ó°½£";
              break;
            case "ğŸŒ“ erstes Viertel":
              out += "#" +  "ó°½£";
              break;
            case "WAXING_GIBBOUS":
              out += "#" +  "ó°½¥";
              break;
            case "ğŸŒ“â†’ğŸŒ• zunehmender Mond":
              out += "#" +  "ó°½¥";
              break;
            case "FULL":
              out += "#" +  "ó°½¤";
              break;
            case "ğŸŒ• Vollmond":
              out += "#" +  "ó°½¤";
              break;
            case "WANING_GIBBOUS":
              out += "#" +   "ó°½§";
              break;
            case "ğŸŒ•â†’ğŸŒ— abnehmender Mond":
              out += "#" + "ó°½§";
              break;
            case "THIRD_QUARTER":
              out += "#" +  "ó°½¡";
              break;
            case "ğŸŒ— letztes Viertel":
              out += "#" +  "ó°½¡";
              break;
            case "WANING_CRESCENT":
              out += "#" +  "ó°½¨";
              break;
            case "ğŸŒ—â†’ğŸŒ‘ abnehmender Halbmond":
              out += "#" +  "ó°½¨";
              break;
            default:
              out += "#" +  " ";
              console.warn("esp32rules.rules", "Undefinierte MoonPhase!!")
        }


        // Regen nÃ¤chste 3 h

        out += "#" + parseFloat(items.getItem("gOpenWeatherMap_ForecastHours03_Rain").state);


        // sleeptime in sec, longer sleep time in night

        var hours = parseInt(now.format(java.time.format.DateTimeFormatter.ofPattern("HH")));

        if (hours >=23 || hours < 7) {
          out += "#" + 5*60;
        }

        else {
            out += "#" + 60;
        }


        // esp32E-Paper display OTA mode


        out += "#" + ((items.getItem("esp32epaperOtaMode").state == "OFF") ? "0" : "1");

        //console.log("OTA: ", (items.getItem("esp32epaperOtaMode").state == "OFF") ? "0" : "1");


        // set to 1 to read battery voltage & wifi signal sensor

        // read battery sensor every full hour

        var minutes = now.format(java.time.format.DateTimeFormatter.ofPattern("mm"));

        //console.log("minutes", minutes);

        out += "#" + ( minutes == "59" ? "1" : "0");

        //out += "#" + "1";





        var mqttActions = actions.Things.getActions("mqtt","mqtt:broker:mosquitto_raspi");

        if (mqttActions === null) {
          console.error("Actions not found, check mqtt broker");
        } 

        else {
          
          mqttActions.publishMQTT("esp32epaper/input/DisplayValues", out, true)
        }


        //                   0    1    2      3         4       5       6       7       8      9      10   11   12    13    14   15   16   17   18  19   20   21       22     23  24

        //console.info("out: Date Time PVWatt TotalWatt AussenT AusTMin AusTMax AussenH WohnzT WohnzH BadT BadH SchlT SchlH SZiT SZiH LZiT LZiH CO2 Wind Mond RainForc SleepT OTA ReadBatt");

        //             out:   Fri 4.Mar 2022#21:36#0#195#2.3#2.3#5.2#67#21.9#41#22.8#71#18.1#54#17.5#52#18.5#48#956#1#ó°½¦#0#30#0#0


        console.info("out: ", out);
    type: script.ScriptAction
