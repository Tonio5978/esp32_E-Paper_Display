
rule esp32epaperPVPower
when
    Item HikingDDS2382Power changed 
    // or Time cron "* 0/5 * ? * * *"  // Every 5 mins
    // or Time cron "0/5 * * ? * * *"  // Every 5 secs
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    // averageSince returns null when PVPower is 0 ..???!! 
    val lastValue = HikingDDS2382Power.state as Number
    logInfo("esp32rules.rules", "PVPower lastValue value: " + lastValue)
    val temp = HikingDDS2382Power.averageSince(now.minusMinutes(1))
    logInfo("esp32rules.rules", "PVPower average value: " + temp)
    if ((temp != null) && (lastValue != 0.0)) {
        mqttActions.publishMQTT("esp32epaper/input/PVPower", (temp).format("%.0f"), true)
    }
    else {
        mqttActions.publishMQTT("esp32epaper/input/PVPower", HikingDDS2382Power.state.format("%.0f"), true)
        // logInfo("esp32rules.rules", "not changed, reporting last value")
    }
end


rule esp32epaperTotalPower
when
    Item emonAccumulatedWatts changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/TotalPower", (emonAccumulatedWatts.averageSince(now.minusMinutes(1))).format("%.0f"), true)
    // mqttActions.publishMQTT("esp32epaper/input/TotalPower", emonAccumulatedWatts.state.toString, true)
end

rule esp32epaperTempLivingRoom
when
    Item Aqara1Temperatur changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/tempLivingRoom", Aqara1Temperatur.state.format("%.1f"), true)
end
rule esp32epaperHumLivingRoom
when
    Item Aqara1Luftfeuchte changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/humLivingRoom", Aqara1Luftfeuchte.state.format("%.0f"), true)
end

rule esp32epapertempBath
when
    Item Aqara2Temperatur changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/tempBath", Aqara2Temperatur.state.format("%.1f"), true)
end
rule esp32epaperhumBath
when
    Item Aqara2Luftfeuchte changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/humBath", Aqara2Luftfeuchte.state.format("%.0f"), true)
end

rule esp32epapertempBedroom
when
    Item SchlafzimmerTemperatur changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/tempBedroom", SchlafzimmerTemperatur.state.format("%.1f"), true)
end
rule esp32epaperhumBedroom
when
    Item SchlafzimmerLuftfeuchte changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/humBedroom", SchlafzimmerLuftfeuchte.state.format("%.0f"), true)
end

rule esp32epapertempBoysroom
when
    Item KinderzimmerTemperatur changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/tempBoysroom", KinderzimmerTemperatur.state.format("%.1f"), true)
end
rule esp32epaperhumBoysroom
when
    Item KinderzimmerLuftfeuchte changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/humBoysroom", KinderzimmerLuftfeuchte.state.format("%.0f"), true)
end


rule esp32epapertempGirlsroom
when
    Item ArbeitszimmerTemperatur changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/tempGirlsroom", ArbeitszimmerTemperatur.state.format("%.1f"), true)
end
rule esp32epaperhumGirlsroom
when
    Item ArbeitszimmerLuftfeuchte changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/humGirlsroom", ArbeitszimmerLuftfeuchte.state.format("%.0f"), true)
end


rule esp32epaperCO2
when
    Item Vorraum1StkCO2 changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/CO2", Vorraum1StkCO2.state.format("%.0f"), true)
end

rule esp32epaperWind
when
    Item BalkonWindgeschwindigkeit changed
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    mqttActions.publishMQTT("esp32epaper/input/Wind", (BalkonWindgeschwindigkeit.averageSince(now.minusMinutes(30))).format("%.0f"), true)
end


rule esp32epaperMoonPhase 
when 
    Item MoonPhase changed
    // or  Time cron "0/5 * * ? * * *"  // Every 5 secs 
then 
    val mqttActions = getActions("mqtt","mqtt:broker:mosquitto_raspi")
    
    //   "ó°½¢", # NEW                     NEW=ðŸŒ‘ Neumond
    //   "ó°½¦", # WAXING_CRESCENT          WAXING_CRESCENT=ðŸŒ‘â†’ðŸŒ“ zunehmender Halbmond 
    //   "ó°½£", # FIRST_QUARTER           FIRST_QUARTER=ðŸŒ“ erstes Viertel
    //   "ó°½¥", # WAXING_GIBBOUS          WAXING_GIBBOUS=ðŸŒ“â†’ðŸŒ• zunehmender Mond
    //   "ó°½¤", # FULL                     FULL=ðŸŒ• Vollmond 
    //   "ó°½§", # WANING_GIBBOUS          WANING_GIBBOUS=ðŸŒ•â†’ðŸŒ— abnehmender Mond
    //   "ó°½¡", # THIRD_QUARTER            THIRD_QUARTER=ðŸŒ— letztes Viertel 
    //   "ó°½¨", # WANING_CRESCENT         WANING_CRESCENT=ðŸŒ—â†’ðŸŒ‘ abnehmender Halbmond

	switch MoonPhase.state.toString
	{
		case "NEW": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¢", true)
		case "WAXING_CRESCENT": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¦", true)
		case "FIRST_QUARTER": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½£", true)
		case "WAXING_GIBBOUS": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¥", true)
		case "FULL": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¤", true)
		case "WANING_GIBBOUS": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½§", true)
		case "THIRD_QUARTER": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¡", true)
		case "WANING_CRESCENT": mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "ó°½¨", true)
		default:
		{   
            mqttActions.publishMQTT("esp32epaper/input/MoonPhase", "", true)
			logWarn ("esp32rules.rules", "Undefinierte MoonPhase!!")
		}
	}



end
