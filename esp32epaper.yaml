substitutions:
  devicename: esp32epaper
  
globals:
  - id: prevent_sleep
    type: bool
    restore_value: no
    initial_value: "false"
  - id: valueCount
    type: int
    restore_value: no
    initial_value: "0"
    
esphome:
  name: $devicename
  platform: ESP32
  board: esp-wrover-kit
  platformio_options: 
    upload_speed: 921600
    board_build.f_flash: 80000000L
  on_boot:
    priority: -100
    then:
      - logger.log: "boot ready..."
      # - delay: 1s
      # - logger.log: "delayed 1s... update display"
      # - component.update: my_display      
      # - delay: 6s
      # - logger.log: "delayed 6s..."
      - if:
          condition:
            lambda: 'return id(prevent_sleep);'
          then:
            - logger.log: "OTA Mode"
          else:
            if:
              condition:
                # adjust sleep time to hour of the day
                lambda: 'return ((id(current_time).now().hour < 6) || (id(current_time).now().hour > 22)) ;'
              then:
                - logger.log: "nighttime..."
                - lambda: 'id(deep_sleep_1).set_sleep_duration(5*60*1000);'
                # - deep_sleep.enter: deep_sleep_1
              else:
                - logger.log: "daytime..."
                - lambda: 'id(deep_sleep_1).set_sleep_duration(60*1000);'
                # - deep_sleep.enter: deep_sleep_1      
  on_loop:
    then:
      - if:
          condition:
            lambda: 'return (id(valueCount) == 10) ;'
          then:
            - logger.log: "all values ready..."
            - lambda: 'id(valueCount) += 1;'
            - component.update: my_display
            # - lambda: 'WiFi.mode(WIFI_OFF);'
            - delay: 6s
            - logger.log: "delayed 6s..."
            - if:
                condition:
                  lambda: 'return id(prevent_sleep);'
                then:
                  - logger.log: "OTA Mode"
                else:
                  - deep_sleep.enter: deep_sleep_1
          # else:
            # - logger.log: "waiting for values..."
packages:
  wifi: !include wifi.yaml
#  ble: !include ble.yaml


mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_password
  discovery: false
  client_id: $devicename
  on_message: # Manueller refresh des Displays bei Änderung
    - topic: $devicename/input/ota_mode
      payload: '1'
      then:
        - globals.set:
            id: prevent_sleep
            value: 'true'
        - deep_sleep.prevent: deep_sleep_1
    - topic: $devicename/input/refresh_display
      payload: "1"
      then:
        - component.update: my_display
    - topic: $devicename/input/sleep_mode
      payload: '1'
      then:
        - deep_sleep.enter: deep_sleep_1

# Enable logging
logger:
  # level: DEBUG
  level: ERROR


time:
 - platform: sntp
   id: current_time
   timezone: Europe/Vienna
   servers : 192.168.11.1

#web_server:
#  port: 80

#switch:
#  - platform: restart
#    name: "$devicename Restart"

text_sensor:
  - platform: mqtt_subscribe
    id: moonPhase
    topic: esp32epaper/input/MoonPhase
    on_value:
      then:
        - lambda: 'id(valueCount) += 1;'
 
uart:
  rx_pin: GPIO26
  tx_pin: GPIO25
  baud_rate: 9600

sensor:
#  - platform: uptime
#    name: "$devicename Uptime Sensor"

  - platform: mqtt_subscribe
    id: outside_temperature
    topic: esp32epaper/input/AussenTemperatur
    on_value:
      then:
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    id: sensorAussenLuftfeuchte
    topic: esp32epaper/input/AussenLuftfeuchte
    on_value:
      then:
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    id: inside_temperature
    topic: esp32epaper/input/InsideTemperature
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    id: InsideHumidity
    topic: esp32epaper/input/InsideHumidity
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    id: pvPower
    topic: esp32epaper/input/PVPower
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    topic: esp32epaper/input/TotalPower
    id: totalPower
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    topic: esp32epaper/input/CO2
    id: CO2
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    topic: esp32epaper/input/AussenTemperaturMin
    id: AussenTemperaturMin
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: mqtt_subscribe
    topic: esp32epaper/input/AussenTemperaturMax
    id: AussenTemperaturMax
    on_value:
      then:
        - logger.log: "Value recieved..."
        - lambda: 'id(valueCount) += 1;'

  - platform: wifi_signal
    name: "$devicename WiFi Signal Sensor"
    id: wifisignal
    update_interval: 5min


spi:
  clk_pin: GPIO19
  mosi_pin: GPIO18
#  miso_pin: GPIO5

font:
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: clock_font
    size: 90
    glyphs: [0, 1, 2, 3, 4, 5, 6, 7 ,8, 9, ':']
  - file: 'fonts/Google_Sans_Medium.ttf'
    id: temp_font
    size: 55
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: status_font
    size: 36
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']
       
  - file: 'fonts/materialdesignicons-webfont_5.9.55.ttf'
    id: weather_font
    size: 50
    glyphs: [

      # Wifi
      '󰤯', # F092F mdi-wifi-strength-outline
      '󰤟', # F091F mdi-wifi-strength-1
      '󰤢', # F0922 mdi-wifi-strength-2
      '󰤥', # F0925 mdi-wifi-strength-3
      '󰤨', # F0928 mdi-wifi-strength-4
      ]

  # Preview https://pictogrammers.github.io/@mdi/font/5.9.55/
  # Download: https://cdnjs.com/libraries/MaterialDesign-Webfont
  - file: 'fonts/materialdesignicons-webfont_5.9.55.ttf'
    id: icon_font
    size: 70
    glyphs: [
      '󰢙', # F0899 mdi-account-heart
      '󰔏', # F050F mdi-thermometer
      '󰸂', # F0E02 mdi-thermometer-chevron-down Tempmin
      '󰸃', # F0E03 mdi-thermometer-chevron-up Tempmax
      '󱄷', # F1137 mdi-fire-hydrant
      
      '󰖎', # F058E mdi-water-percent
      '󰕊', # F054A mdi-umbrella
      '󰽕', # F0F55 mdi-home-thermometer-outline
      '󰽔', # F0F54 mdi-home-thermometer
      '󰟤', # F07E4 mdi-molecule-co2
      '󰩲', # F0A72 mdi-solar-power
      '󰚥', # F06A5 mdi-power-plug
      '󰖝', # F059D mdi-weather-windy
      '󰿓', # F0FD3 mdi-bed-double-outline

      '󰊚', # F029A mdi-gauge
      '󱗺', # F15FA mdi-windsock
      '󰖌', # F058C mdi-water
      '󰅐', # F0150 mdi-clock-outline Clock      

      # Sun
      '󰖛', # F059B mdi-weather-sunset-down
      '󰖜', # F059C mdi-weather-sunset-up

      # Moon
      "󰽤", # F0F64 mdi-moon-new new_moon
      "󰽧", # F0F67 mdi-moon-waxing-crescent waxing_crecent
      "󰽡", # F0F61 mdi-moon-first-quarter first_quarter
      "󰽨", # F0F68 mdi-moon-waxing-gibbous waxing_gibbous
      "󰽢", # F0F62 mdi-moon-full full_moon
      "󰽦", # F0F66 mdi-moon-waning-gibbous waning_gibbous
      "󰽣", # F0F63 mdi-moon-last-quarter last_quarter
      "󰽥", # F0F65 mdi-moon-waning-crescent waning_crescent
      "󰁔", # F0054 mdi-arrow-right
      ]


display:
  - platform: waveshare_epaper
    cs_pin: GPIO15
    dc_pin: GPIO14
    busy_pin: GPIO21
    reset_pin: GPIO22
    model: 7.50inV2
    update_interval: never
    id: my_display
    lambda: |
      int x, y;

      /* Print time in HH:MM format */
      it.strftime(125, -10, id(clock_font), TextAlign::TOP_CENTER, "%H:%M", id(current_time).now());

      /* Moon icon */
      if(id(moonPhase).has_state()) {
        y = 355, x = 230;
        ESP_LOGI("Moon icon", "%s", id(moonPhase).state.c_str());
        it.printf(x, y, id(icon_font), TextAlign::BASELINE_CENTER, "%s", id(moonPhase).state.c_str());
      }
      

      
      /* WiFi Signal Strenght */
      if(id(wifisignal).has_state()) {
        x = 798, y = 478;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(weather_font), TextAlign::BOTTOM_RIGHT, "󰤨");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(weather_font), TextAlign::BOTTOM_RIGHT, "󰤥");
            ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -67) {
            //Fair
            it.print(x, y, id(weather_font), TextAlign::BOTTOM_RIGHT, "󰤢");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -70) {
            //Weak
            it.print(x, y, id(weather_font), TextAlign::BOTTOM_RIGHT, "󰤟");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(weather_font), TextAlign::BOTTOM_RIGHT, "󰤯");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }


      // Print inside temperature (from homeassistant sensor)
      y = 155, x = 102;
      if (id(inside_temperature).has_state()) {
        it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰽔");
        it.printf(x+2, y, id(temp_font), TextAlign::BOTTOM_LEFT , "%6.1f°C", id(inside_temperature).state);
        }
      if (id(InsideHumidity).has_state()) {
        it.printf(x+x+x+x, y, id(icon_font), TextAlign::BOTTOM_LEFT, "󰖎"); 
        it.printf(x+x+x+x+x/2, y, id(temp_font), TextAlign::BOTTOM_LEFT , "%3.0f%%", id(InsideHumidity).state);
        }
      // Print outside temperature 
      if (id(outside_temperature).has_state()) {
        it.print(x, y, id(icon_font), TextAlign::TOP_RIGHT, "󰽕"); 
        it.printf(x+2, y, id(temp_font), TextAlign::TOP_LEFT, "%6.1f°C", id(outside_temperature).state);
      }
      if (id(sensorAussenLuftfeuchte).has_state()) {
        it.printf(x+x+x+x, y, id(icon_font), TextAlign::TOP_LEFT, "󰖎"); 
        it.printf(x+x+x+x+x/2, y, id(temp_font), TextAlign::TOP_LEFT, "%3.0f%%", id(sensorAussenLuftfeuchte).state);
      }

      // Print outside min temperature 
      if (id(AussenTemperaturMin).has_state()) {
        it.print(x, 220, id(icon_font), TextAlign::TOP_RIGHT, "󰸂"); 
        it.printf(x+2, 220, id(temp_font), TextAlign::TOP_LEFT, "%6.1f°C", id(AussenTemperaturMin).state);
      }

      // Print outside max temperature 
      if (id(AussenTemperaturMax).has_state()) {
        it.print(x+x+x+x, 220, id(icon_font), TextAlign::TOP_RIGHT, "󰸃"); 
        it.printf(x+x+x+x+x/2, 220, id(temp_font), TextAlign::TOP_LEFT, "%6.1f°C", id(AussenTemperaturMax).state);
      }

      
      /* CO2 icon */
      if(id(CO2).has_state()) {
        it.print(x+x+x+x, y+y, id(icon_font), TextAlign::TOP_LEFT, "󰟤"); 
        it.printf(x+x+x+x+x/2, y+y, id(temp_font), TextAlign::TOP_LEFT, "%4.0f", id(CO2).state);
      }
      
      // Print consumer
      if (id(pvPower).has_state()) {
        it.print(0, 480, id(icon_font), TextAlign::BOTTOM_LEFT, "󰚥");
        it.printf(70, 480, id(temp_font), TextAlign::BOTTOM_LEFT , "%4.0f W", id(totalPower).state);
        it.print(400, 480, id(icon_font), TextAlign::BOTTOM_LEFT, "󰩲");
        it.printf(470, 480, id(temp_font), TextAlign::BOTTOM_LEFT , "%3.0f W", id(pvPower).state);
        


      }
      // it.line(0, 299, 400, 299);



# Example configuration entry
deep_sleep:
  run_duration: 15s
  sleep_duration: 2min
  id: deep_sleep_1

